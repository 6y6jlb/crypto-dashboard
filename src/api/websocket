import {
  AGGREGATE_INDEX,
  INVALID_SUB,
  REQUEST_CURRENCIES,
  SOCKET_LIMIT,
  BROADCAST_EVENT,
} from "./const.js";
import { appChannel } from "./brocadcasts";

const BROADCAST_ID = "" + Math.ceil(Math.random() * 1000) * 21;

const tickersHandlers = {
  success: new Map(),
  fail: new Map(),
};
const paralleStreamTickers = {};

const socket = new WebSocket(
  `wss://streamer.cryptocompare.com/v2?api_key=${process.env.VUE_APP_CRYPTOCOMPARE}`
);

socket.addEventListener("message", (e) => {
  const {
    TYPE: type,
    FROMSYMBOL: ticker,
    PRICE: newPrice,
    TOSYMBOL: currency,
    PARAMETER: parameter,
  } = JSON.parse(e.data);

  if (type === INVALID_SUB && parameter) {
    const options = parameter.split("~");
    const failHandlers = tickersHandlers.fail[options[-2]] || [];
    failHandlers.forEach((fn) => fn(options[-1]));
  } else if (type === AGGREGATE_INDEX && newPrice && currency) {
    const successHandlers = tickersHandlers.success[ticker] || [];
    successHandlers.forEach((fn) => fn(newPrice, currency));

    if (Object.keys(paralleStreamTickers).length) {
      for (let key in paralleStreamTickers) {
        appChannel.postMessage({
          type: BROADCAST_EVENT.NEW_PRICE_WITH_CURRENCY,
          channel_id: key,
          data: {
            ticker: ticker,
            currency: currency,
            price: newPrice,
          },
        });
      }
    }
  } else if (type === SOCKET_LIMIT) {
    appChannel.postMessage({
      type: BROADCAST_EVENT.SUBSCRIBE_ALL,
      channel_id: BROADCAST_ID,
      data: Object.keys(tickersHandlers.success),
    });
  }

  return;
});

function sendToWebSocket(message) {
  const stringifiedMessage = JSON.stringify(message);

  if (socket.readyState === WebSocket.OPEN) {
    socket.send(stringifiedMessage);
    return;
  }

  socket.addEventListener(
    "open",
    () => {
      socket.send(stringifiedMessage);
    },
    { once: true }
  );
}

function subscribeToTickerOnWs(ticker) {
  for (let currency of REQUEST_CURRENCIES) {
    sendToWebSocket({
      action: "SubAdd",
      subs: [`5~CCCAGG~${ticker}~${currency}`],
    });
  }
}

function unsubscribeFromTickerOnWs(ticker) {
  for (let currency of REQUEST_CURRENCIES) {
    sendToWebSocket({
      action: "SubRemove",
      subs: [`5~CCCAGG~${ticker}~${currency}`],
    });
  }
}

export const subscribeToTicker = (ticker, cb, reason) => {
  const subscribers = tickersHandlers[reason][ticker] || [];
  tickersHandlers[reason][ticker] = [...subscribers, cb];
  subscribeToTickerOnWs(ticker);
};

export const unsubscribeFromTicker = (ticker) => {
  delete tickersHandlers[ticker];
  unsubscribeFromTickerOnWs(ticker);
};

// brodcast events
appChannel.onmessage = (event) => {
  if (event.data?.type === BROADCAST_EVENT.SUBSCRIBE_ALL) {
    paralleStreamTickers[event.data.channel_id] = event.data.data || [];
    paralleStreamTickers[event.data.channel_id].forEach((ticker) =>
      subscribeToTickerOnWs(ticker)
    );
  } else if (event.data?.type === BROADCAST_EVENT.SUBSCRIBE_ONE) {
    paralleStreamTickers[event.data.channel_id].push(event.data.data);
    subscribeToTickerOnWs(event.data.data);
  } else if (event.data?.type === BROADCAST_EVENT.UNSUBSCRIBE_ONE) {
    paralleStreamTickers[event.data.channel_id].filter(
      (ticker) => ticker !== event.data.data
    );
    unsubscribeFromTickerOnWs(event.data.data);
  } else if (event.data?.type === BROADCAST_EVENT.UNSUBSCRIBE_ALL) {
    paralleStreamTickers[event.data.channel_id].forEach((ticker) =>
      unsubscribeFromTickerOnWs(ticker)
    );
    paralleStreamTickers[event.data.channel_id] = [];
  } else if (
    event.data?.type === BROADCAST_EVENT.NEW_PRICE_WITH_CURRENCY &&
    BROADCAST_ID === event.data.channel_id
  ) {
    const { ticker, currency, price } = event.data.data;
    const successHandlers = tickersHandlers.success[ticker] || [];
    successHandlers.forEach((fn) => fn(price, currency));
  }
};
